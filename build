#!/bin/bash

# build and run the executable
if [[ "$1" == "run" ]]; then
    if [[ -z "$2" || "$2" == "--debug" ]]; then
        cmake --preset unix-debug && cmake --build ./out/unix-debug && ./out/unix-debug/main
    elif [[ "$2" == "--release" ]]; then
        cmake --preset unix-release && cmake --build ./out/unix-release && ./out/unix-release/main
    else
        echo "Invalid option. Use --debug or --release."
        exit 1
    fi
# build the executable
elif [[ "$1" == "build" ]]; then
    if [[ -z "$2" || "$2" == "--debug" ]]; then
        echo "Building debug version..."
        cmake --preset unix-debug && cmake --build ./out/unix-debug
    elif [[ "$2" == "--release" ]]; then
        echo "Building release version..."
        cmake --preset unix-release && cmake --build ./out/unix-release
    elif [[ "$2" == "--all" ]]; then
        echo "Building both debug and release versions..."

        # Build for debug
        echo -e "\e[32mBuilding debug version...\e[0m"
        cmake --preset unix-debug && cmake --build ./out/unix-debug
        
        # Build for release
        echo -e "\e[32mBuilding release version...\e[0m"
        cmake --preset unix-release && cmake --build ./out/unix-release
    else
        echo "Invalid option. Use --debug or --release or --all."
        exit 1
    fi
# clean the build directory
elif [[ "$1" == "clean" ]]; then
    if [[ "$2" == "--debug" ]]; then
        rm -rf ./out/unix-debug
        echo "Cleaned debug build directory."
    elif [[ "$2" == "--release" ]]; then
        rm -rf ./out/unix-release
        echo "Cleaned release build directory."
    else
        rm -rf ./out
        echo "Cleaned all build directories."
    fi
elif [[ "$1" == "help" ]]; then
    echo "Usage: ./build [run|clean|help] [--debug|--release|--all]"
else
    echo "Usage: ./build run [--debug|--release]"
    exit 1
fi
